plotVar <- melt(All.VAR, variable.name = "tickers", value.name = "VaR")
ggplot(plotVar, aes(x=Type, y=VaR, fill=tickers)) + geom_bar(stat = "identity", position = "dodge")
Port.prices <- Ad(eval(parse(text = tickers[1])))
Port.prices <- Ad(eval(parse(text = tickers[1])))
library(quantmod)
library(PerformanceAnalytics)
library(reshape2)
library(ggplot2)
#step1 get the input ready
maxDate <- "2015-09-01"
tickers <- c("BMW.F","ALIZF","SAPGF")
weights <- c(0.33, 0.33, 0.33)
#step2 get the specific data required for calculation
getSymbols(tickers, from = maxDate, auto.assign=TRUE)
Port.prices <- Ad(eval(parse(text = tickers[1])))
#then calculate the returns
Port.returns <- ROC(Port.prices, type="discrete")[-1,]
Port.prices
x <- c(2,5,3,9,8,11,6)
count <- 0
for (val in x) {
if(val %% 2 == 0)  count = count+1
}
print(count)
n <- tickers
n
n <- length(tickers)
n
for (i in range(1,3)){
i
}
for (i in range(1,3)){
i
}
for (i in range(1,3)){
i
}
i
print(x)
print(x)
print(i)
print(i)
for (i in range(1,3)){
print(i)
}
print(i)
for (i in range(1,3)){
print(i)
}
for (i in range(1,3)){
print(i)
}
for (i in range(1:3)){
print(i)
}
for (i in c(1:3)){
print(i)
}
for (i in c(1:10)){
print(i)
}
for (i in c(2:2)){
print(i)
}
for (i in c(1:n)) {
Port.prices <- Ad(eval(parse(text = tickers[i])))
}
Port.prices
for (i in c(1:n)) {
ad <- Ad(eval(parse(text = tickers[i])))
Port.prices$tickers[i] <- ad
}
for (i in c(1:n)) {
Port.prices$tickers[i] <- Ad(eval(parse(text = tickers[i])))
}
for (i in c(1:n)) {
Port.prices$eval(parse(text = tickers[1])) <- Ad(eval(parse(text = tickers[i])))
}
#step2 get the specific data required for calculation
getSymbols(tickers, from = maxDate, auto.assign=TRUE)
for (i in c(1:n)) {
Port.prices$eval(parse(text = tickers[i])) <- Ad(eval(parse(text = tickers[i])))
}
for (i in c(1:n)) {
Port.prices$i <- Ad(eval(parse(text = tickers[i])))
}
#step2 get the specific data required for calculation
getSymbols(tickers, from = maxDate, auto.assign=TRUE)
for (i in c(1:n)) {
Port.prices <- Ad(eval(parse(text = tickers[i])))
}
Port.prices <- Ad(eval(parse(text = tickers[1])))
Port.prices
for (i in c(2:n)) {
Port.prices <- Ad(eval(parse(text = tickers[i])))
}
Port.prices <- Ad(eval(parse(text = tickers[1])))
#step1 get the input ready
maxDate <- "2017-01-01"
tickers <- c("BMW.F","ALIZF","SAPGF")
weights <- c(0.33, 0.33, 0.33)
#step2 get the specific data required for calculation
getSymbols(tickers, from = maxDate, auto.assign=TRUE)
Port.prices <- Ad(eval(parse(text = tickers[1])))
Port.prices
head.Port.prices
Port.prices(head)
head(Port.prices)
for (i in c(2:n)) {
Port.prices <- Ad(eval(parse(text = tickers[i])))
}
head(Port.prices)
Port.prices <- Ad(eval(parse(text = tickers[1])))
for (i in c(2:n)) {
Port.prices$i <- Ad(eval(parse(text = tickers[i])))
}
for (i in c(2:n)) {
Port.prices$i <- 0
Port.prices$i <-  Ad(eval(parse(text = tickers[i])))
}
for (i in c(2:n)) {
Port.prices$1 <- 0
Port.prices$1 <- Ad(eval(parse(text = tickers[i])))
}
for (i in c(2:n)) {
Port.prices$haha <- 0
Port.prices$haha <- Ad(eval(parse(text = tickers[i])))
}
Port.prices
for (i in c(2:n)) {
Port.prices$i <- 0
Port.prices$i <- Ad(eval(parse(text = tickers[i])))
}
Port.prices <- Ad(eval(parse(text = tickers[1])))
head(Port.prices)
for (i in c(2:n)) {
Port.prices$tickers[i] <- Ad(eval(parse(text = tickers[i])))
}
Port.prices <- data.frame()
Port.prices
for (i in c(2:n)) {
Port.prices$tickers[i] <- Ad(eval(parse(text = tickers[i])))
}
for (i in c(2:n)) {
#Port.prices$tickers[i] <- Ad(eval(parse(text = tickers[i])))
print(tickers[i])
}
for (i in c(2:n)) {
#Port.prices$tickers[i] <- Ad(eval(parse(text = tickers[i])))
Port.prices$tickers[i] <- 0
}
Port.prices
Port.prices <- Ad(eval(parse(text = tickers[1])))
for (i in c(2:n)) {
#Port.prices$tickers[i] <- Ad(eval(parse(text = tickers[i])))
Port.prices$tickers[i] <- 0
}
Port.prices
for (i in c(2:n)) {
#Port.prices$tickers[i] <- Ad(eval(parse(text = tickers[i])))
Port.prices$tickers[i] <- 1
}
for (i in c(2:n)) {
#Port.prices$tickers[i] <- Ad(eval(parse(text = tickers[i])))
Port.prices$tickers[i] <- 0
}
for (i in c(2:n)) {
#Port.prices$tickers[i] <- Ad(eval(parse(text = tickers[i])))
Port.prices$tickers[i] <- 0
}
Port.prices <- data.frame()
Port.prices <- Ad(eval(parse(text = tickers[1])))
Port.prices
for (i in c(2:n)) {
#Port.prices$tickers[i] <- Ad(eval(parse(text = tickers[i])))
cbind(Ad(eval(parse(text = tickers[i]))), tickers[i])
}
for (i in c(2:n)) {
#Port.prices$tickers[i] <- Ad(eval(parse(text = tickers[i])))
cbind(Port.prices ,Ad(eval(parse(text = tickers[i]))))
}
Port.prices
for (i in c(2:n)) {
#Port.prices$tickers[i] <- Ad(eval(parse(text = tickers[i])))
Port.prices <- cbind(Port.prices ,Ad(eval(parse(text = tickers[i]))))
}
Port.prices
Port.prices <- data.frame()
Port.prices
for (i in c(1:n)) {
#Port.prices$tickers[i] <- Ad(eval(parse(text = tickers[i])))
Port.prices <- cbind(Port.prices ,Ad(eval(parse(text = tickers[i]))))
}
Port.prices <- Ad(eval(parse(text = tickers[1])))
for (i in c(2:n)) {
#Port.prices$tickers[i] <- Ad(eval(parse(text = tickers[i])))
Port.prices <- cbind(Port.prices ,Ad(eval(parse(text = tickers[i]))))
}
Port.prices
#then calculate the returns
Port.returns <- ROC(Port.prices, type="discrete")[-1,]
#change the column name for better outlook
colnames(Port.returns) <- tickers
#step3 calculate the VaR in our porfolio
VaR.Hist <- VaR(Port.returns, p=0.95, weights = NULL, portfolio_method = "single", method = "historical")
VaR.Gaus <- VaR(Port.returns, p=0.95, weights = NULL, portfolio_method = "single", method = "gaussian")
VaR.Mod <- VaR(Port.returns, p=0.95, weights = NULL, portfolio_method = "single", method = "modified")
All.VAR <- data.frame(rbind(VaR.Hist, VaR.Gaus, VaR.Mod))
rownames(All.VAR) <- c("Hist", "Gaussian", "Modified")
VaR.Port.Hist <- VaR(Port.returns, p=0.95, weights = weights, portfolio_method = "component", method = "historical")
VaR.Port.Gaus <- VaR(Port.returns, p=0.95, weights = weights, portfolio_method = "component", method = "gaussian")$VaR[1,1]
VaR.Port.Mod <- VaR(Port.returns, p=0.95, weights = weights, portfolio_method = "component", method = "modified")$MVaR[1,1]
All.VAR$Portfolio <- c(VaR.Port.Hist, VaR.Port.Gaus, VaR.Port.Mod)
All.VAR <- abs(All.VAR)
All.VAR$Type <- c("Historical", "Gaussian", "Modified")
#final step plot!
plotVar <- melt(All.VAR, variable.name = "tickers", value.name = "VaR")
ggplot(plotVar, aes(x=Type, y=VaR, fill=tickers)) + geom_bar(stat = "identity", position = "dodge")
library(quantmod)
library(PerformanceAnalytics)
library(reshape2)
library(ggplot2)
#step1 get the input ready
maxDate <- "2017-01-01"
tickers <- c("BMW.F","ALIZF","SAPGF")
weights <- c(0.33, 0.33, 0.33)
n <- length(tickers)
#step2 get the specific data required for calculation
getSymbols(tickers, from = maxDate, auto.assign=TRUE)
#take the adjusted price column into one dataframe
#My first attempt!!!
#Port.prices <- merge(Ad(TSLA),Ad(AAPL),Ad(AMZN))       #??????this step, how to put merge(tickers) instead of put name into the fuction.
#My Second attenpt!!!
#Port.prices <- merge(Ad(eval(parse(text = tickers[1]))),Ad(eval(parse(text = tickers[2]))),Ad(eval(parse(text = tickers[3]))))
Port.prices <- data.frame()
Port.prices <- Ad(eval(parse(text = tickers[1])))
for (i in c(2:n)) {
#Port.prices$tickers[i] <- Ad(eval(parse(text = tickers[i])))
Port.prices <- cbind(Port.prices ,Ad(eval(parse(text = tickers[i]))))
}
#then calculate the returns
Port.returns <- ROC(Port.prices, type="discrete")[-1,]
#change the column name for better outlook
colnames(Port.returns) <- tickers
#step3 calculate the VaR in our porfolio
VaR.Hist <- VaR(Port.returns, p=0.95, weights = NULL, portfolio_method = "single", method = "historical")
VaR.Gaus <- VaR(Port.returns, p=0.95, weights = NULL, portfolio_method = "single", method = "gaussian")
VaR.Mod <- VaR(Port.returns, p=0.95, weights = NULL, portfolio_method = "single", method = "modified")
All.VAR <- data.frame(rbind(VaR.Hist, VaR.Gaus, VaR.Mod))
rownames(All.VAR) <- c("Hist", "Gaussian", "Modified")
VaR.Port.Hist <- VaR(Port.returns, p=0.95, weights = weights, portfolio_method = "component", method = "historical")
VaR.Port.Gaus <- VaR(Port.returns, p=0.95, weights = weights, portfolio_method = "component", method = "gaussian")$VaR[1,1]
VaR.Port.Mod <- VaR(Port.returns, p=0.95, weights = weights, portfolio_method = "component", method = "modified")$MVaR[1,1]
All.VAR$Portfolio <- c(VaR.Port.Hist, VaR.Port.Gaus, VaR.Port.Mod)
All.VAR <- abs(All.VAR)
All.VAR$Type <- c("Historical", "Gaussian", "Modified")
#final step plot!
plotVar <- melt(All.VAR, variable.name = "tickers", value.name = "VaR")
ggplot(plotVar, aes(x=Type, y=VaR, fill=tickers)) + geom_bar(stat = "identity", position = "dodge")
plotVar
VaR.Port.Gaus <- VaR(Port.returns, p=0.95, weights = weights, portfolio_method = "component", method = "gaussian")$VaR[1,1]
library(quantmod)
library(PerformanceAnalytics)
library(reshape2)
library(ggplot2)
#step1 get the input ready
maxDate <- "2015-01-01"
tickers <- c("BMW.F","ALIZF","SAPGF")
weights <- c(0.33, 0.33, 0.33)
n <- length(tickers)
#step2 get the specific data required for calculation
getSymbols(tickers, from = maxDate, auto.assign=TRUE)
#take the adjusted price column into one dataframe
#My first attempt!!!
#Port.prices <- merge(Ad(TSLA),Ad(AAPL),Ad(AMZN))       #??????this step, how to put merge(tickers) instead of put name into the fuction.
#My Second attenpt!!!
#Port.prices <- merge(Ad(eval(parse(text = tickers[1]))),Ad(eval(parse(text = tickers[2]))),Ad(eval(parse(text = tickers[3]))))
Port.prices <- data.frame()
Port.prices <- Ad(eval(parse(text = tickers[1])))
for (i in c(2:n)) {
#Port.prices$tickers[i] <- Ad(eval(parse(text = tickers[i])))
Port.prices <- cbind(Port.prices ,Ad(eval(parse(text = tickers[i]))))
}
#then calculate the returns
Port.returns <- ROC(Port.prices, type="discrete")[-1,]
#change the column name for better outlook
colnames(Port.returns) <- tickers
#step3 calculate the VaR in our porfolio
VaR.Hist <- VaR(Port.returns, p=0.95, weights = NULL, portfolio_method = "single", method = "historical")
VaR.Gaus <- VaR(Port.returns, p=0.95, weights = NULL, portfolio_method = "single", method = "gaussian")
VaR.Mod <- VaR(Port.returns, p=0.95, weights = NULL, portfolio_method = "single", method = "modified")
All.VAR <- data.frame(rbind(VaR.Hist, VaR.Gaus, VaR.Mod))
rownames(All.VAR) <- c("Hist", "Gaussian", "Modified")
VaR.Port.Hist <- VaR(Port.returns, p=0.95, weights = weights, portfolio_method = "component", method = "historical")
VaR.Port.Gaus <- VaR(Port.returns, p=0.95, weights = weights, portfolio_method = "component", method = "gaussian")$VaR[1,1]
VaR.Port.Mod <- VaR(Port.returns, p=0.95, weights = weights, portfolio_method = "component", method = "modified")$MVaR[1,1]
All.VAR$Portfolio <- c(VaR.Port.Hist, VaR.Port.Gaus, VaR.Port.Mod)
All.VAR <- abs(All.VAR)
All.VAR$Type <- c("Historical", "Gaussian", "Modified")
#final step plot!
plotVar <- melt(All.VAR, variable.name = "tickers", value.name = "VaR")
ggplot(plotVar, aes(x=Type, y=VaR, fill=tickers)) + geom_bar(stat = "identity", position = "dodge")
library(quantmod)
library(PerformanceAnalytics)
library(reshape2)
library(ggplot2)
#step1 get the input ready
maxDate <- "2017-01-01"
tickers <- c("BMW.F","ALIZF","SAPGF")
weights <- c(0.33, 0.33, 0.33)
n <- length(tickers)
#step2 get the specific data required for calculation
getSymbols(tickers, from = maxDate, auto.assign=TRUE)
#take the adjusted price column into one dataframe
#My first attempt!!!
#Port.prices <- merge(Ad(TSLA),Ad(AAPL),Ad(AMZN))       #??????this step, how to put merge(tickers) instead of put name into the fuction.
#My Second attenpt!!!
#Port.prices <- merge(Ad(eval(parse(text = tickers[1]))),Ad(eval(parse(text = tickers[2]))),Ad(eval(parse(text = tickers[3]))))
Port.prices <- data.frame()
Port.prices <- Ad(eval(parse(text = tickers[1])))
for (i in c(2:n)) {
#Port.prices$tickers[i] <- Ad(eval(parse(text = tickers[i])))
Port.prices <- cbind(Port.prices ,Ad(eval(parse(text = tickers[i]))))
}
#then calculate the returns
Port.returns <- ROC(Port.prices, type="discrete")[-1,]
#change the column name for better outlook
colnames(Port.returns) <- tickers
#step3 calculate the VaR in our porfolio
VaR.Hist <- VaR(Port.returns, p=0.95, weights = NULL, portfolio_method = "single", method = "historical")
VaR.Gaus <- VaR(Port.returns, p=0.95, weights = NULL, portfolio_method = "single", method = "gaussian")
VaR.Mod <- VaR(Port.returns, p=0.95, weights = NULL, portfolio_method = "single", method = "modified")
All.VAR <- data.frame(rbind(VaR.Hist, VaR.Gaus, VaR.Mod))
rownames(All.VAR) <- c("Hist", "Gaussian", "Modified")
VaR.Port.Hist <- VaR(Port.returns, p=0.95, weights = weights, portfolio_method = "component", method = "historical")
VaR.Port.Gaus <- VaR(Port.returns, p=0.95, weights = weights, portfolio_method = "component", method = "gaussian")$VaR[1,1]
VaR.Port.Mod <- VaR(Port.returns, p=0.95, weights = weights, portfolio_method = "component", method = "modified")$MVaR[1,1]
All.VAR$Portfolio <- c(VaR.Port.Hist, VaR.Port.Gaus, VaR.Port.Mod)
All.VAR <- abs(All.VAR)
All.VAR$Type <- c("Historical", "Gaussian", "Modified")
#final step plot!
plotVar <- melt(All.VAR, variable.name = "tickers", value.name = "VaR")
ggplot(plotVar, aes(x=Type, y=VaR, fill=tickers)) + geom_bar(stat = "identity", position = "dodge")
library(quantmod)
library(PerformanceAnalytics)
library(reshape2)
library(ggplot2)
#step1 get the input ready
maxDate <- "2014-01-01"
tickers <- c("BMW.F","ALIZF","SAPGF")
weights <- c(0.33, 0.33, 0.33)
n <- length(tickers)
#step2 get the specific data required for calculation
getSymbols(tickers, from = maxDate, auto.assign=TRUE)
#take the adjusted price column into one dataframe
#My first attempt!!!
#Port.prices <- merge(Ad(TSLA),Ad(AAPL),Ad(AMZN))       #??????this step, how to put merge(tickers) instead of put name into the fuction.
#My Second attenpt!!!
#Port.prices <- merge(Ad(eval(parse(text = tickers[1]))),Ad(eval(parse(text = tickers[2]))),Ad(eval(parse(text = tickers[3]))))
Port.prices <- data.frame()
Port.prices <- Ad(eval(parse(text = tickers[1])))
for (i in c(2:n)) {
#Port.prices$tickers[i] <- Ad(eval(parse(text = tickers[i])))
Port.prices <- cbind(Port.prices ,Ad(eval(parse(text = tickers[i]))))
}
#then calculate the returns
Port.returns <- ROC(Port.prices, type="discrete")[-1,]
#change the column name for better outlook
colnames(Port.returns) <- tickers
#step3 calculate the VaR in our porfolio
VaR.Hist <- VaR(Port.returns, p=0.95, weights = NULL, portfolio_method = "single", method = "historical")
VaR.Gaus <- VaR(Port.returns, p=0.95, weights = NULL, portfolio_method = "single", method = "gaussian")
VaR.Mod <- VaR(Port.returns, p=0.95, weights = NULL, portfolio_method = "single", method = "modified")
All.VAR <- data.frame(rbind(VaR.Hist, VaR.Gaus, VaR.Mod))
rownames(All.VAR) <- c("Hist", "Gaussian", "Modified")
VaR.Port.Hist <- VaR(Port.returns, p=0.95, weights = weights, portfolio_method = "component", method = "historical")
VaR.Port.Gaus <- VaR(Port.returns, p=0.95, weights = weights, portfolio_method = "component", method = "gaussian")$VaR[1,1]
VaR.Port.Mod <- VaR(Port.returns, p=0.95, weights = weights, portfolio_method = "component", method = "modified")$MVaR[1,1]
All.VAR$Portfolio <- c(VaR.Port.Hist, VaR.Port.Gaus, VaR.Port.Mod)
All.VAR <- abs(All.VAR)
All.VAR$Type <- c("Historical", "Gaussian", "Modified")
#final step plot!
plotVar <- melt(All.VAR, variable.name = "tickers", value.name = "VaR")
ggplot(plotVar, aes(x=Type, y=VaR, fill=tickers)) + geom_bar(stat = "identity", position = "dodge")
#step1 get the input ready
maxDate <- "2016-01-01"
library(quantmod)
library(PerformanceAnalytics)
library(reshape2)
library(ggplot2)
#step1 get the input ready
maxDate <- "2016-01-01"
tickers <- c("BMW.F","ALIZF","SAPGF")
weights <- c(0.33, 0.33, 0.33)
n <- length(tickers)
#step2 get the specific data required for calculation
getSymbols(tickers, from = maxDate, auto.assign=TRUE)
#take the adjusted price column into one dataframe
#My first attempt!!!
#Port.prices <- merge(Ad(TSLA),Ad(AAPL),Ad(AMZN))       #??????this step, how to put merge(tickers) instead of put name into the fuction.
#My Second attenpt!!!
#Port.prices <- merge(Ad(eval(parse(text = tickers[1]))),Ad(eval(parse(text = tickers[2]))),Ad(eval(parse(text = tickers[3]))))
Port.prices <- data.frame()
Port.prices <- Ad(eval(parse(text = tickers[1])))
for (i in c(2:n)) {
#Port.prices$tickers[i] <- Ad(eval(parse(text = tickers[i])))
Port.prices <- cbind(Port.prices ,Ad(eval(parse(text = tickers[i]))))
}
#then calculate the returns
Port.returns <- ROC(Port.prices, type="discrete")[-1,]
#change the column name for better outlook
colnames(Port.returns) <- tickers
#step3 calculate the VaR in our porfolio
VaR.Hist <- VaR(Port.returns, p=0.95, weights = NULL, portfolio_method = "single", method = "historical")
VaR.Gaus <- VaR(Port.returns, p=0.95, weights = NULL, portfolio_method = "single", method = "gaussian")
VaR.Mod <- VaR(Port.returns, p=0.95, weights = NULL, portfolio_method = "single", method = "modified")
All.VAR <- data.frame(rbind(VaR.Hist, VaR.Gaus, VaR.Mod))
rownames(All.VAR) <- c("Hist", "Gaussian", "Modified")
VaR.Port.Hist <- VaR(Port.returns, p=0.95, weights = weights, portfolio_method = "component", method = "historical")
VaR.Port.Gaus <- VaR(Port.returns, p=0.95, weights = weights, portfolio_method = "component", method = "gaussian")$VaR[1,1]
VaR.Port.Mod <- VaR(Port.returns, p=0.95, weights = weights, portfolio_method = "component", method = "modified")$MVaR[1,1]
All.VAR$Portfolio <- c(VaR.Port.Hist, VaR.Port.Gaus, VaR.Port.Mod)
All.VAR <- abs(All.VAR)
All.VAR$Type <- c("Historical", "Gaussian", "Modified")
#final step plot!
plotVar <- melt(All.VAR, variable.name = "tickers", value.name = "VaR")
ggplot(plotVar, aes(x=Type, y=VaR, fill=tickers)) + geom_bar(stat = "identity", position = "dodge")
library(quantmod)
library(PerformanceAnalytics)
library(reshape2)
library(ggplot2)
#step1 get the input ready
maxDate <- "2016-01-01"
tickers <- c("BMW.F","ALIZF","SAPGF","FB","TWTR")
weights <- c(0.20,0.20,0.20,0.20,0.20)
n <- length(tickers)
#step2 get the specific data required for calculation
getSymbols(tickers, from = maxDate, auto.assign=TRUE)
#take the adjusted price column into one dataframe
#My first attempt!!!
#Port.prices <- merge(Ad(TSLA),Ad(AAPL),Ad(AMZN))       #??????this step, how to put merge(tickers) instead of put name into the fuction.
#My Second attenpt!!!
#Port.prices <- merge(Ad(eval(parse(text = tickers[1]))),Ad(eval(parse(text = tickers[2]))),Ad(eval(parse(text = tickers[3]))))
Port.prices <- data.frame()
Port.prices <- Ad(eval(parse(text = tickers[1])))
for (i in c(2:n)) {
#Port.prices$tickers[i] <- Ad(eval(parse(text = tickers[i])))
Port.prices <- cbind(Port.prices ,Ad(eval(parse(text = tickers[i]))))
}
#then calculate the returns
Port.returns <- ROC(Port.prices, type="discrete")[-1,]
#change the column name for better outlook
colnames(Port.returns) <- tickers
#step3 calculate the VaR in our porfolio
VaR.Hist <- VaR(Port.returns, p=0.95, weights = NULL, portfolio_method = "single", method = "historical")
VaR.Gaus <- VaR(Port.returns, p=0.95, weights = NULL, portfolio_method = "single", method = "gaussian")
VaR.Mod <- VaR(Port.returns, p=0.95, weights = NULL, portfolio_method = "single", method = "modified")
All.VAR <- data.frame(rbind(VaR.Hist, VaR.Gaus, VaR.Mod))
rownames(All.VAR) <- c("Hist", "Gaussian", "Modified")
VaR.Port.Hist <- VaR(Port.returns, p=0.95, weights = weights, portfolio_method = "component", method = "historical")
VaR.Port.Gaus <- VaR(Port.returns, p=0.95, weights = weights, portfolio_method = "component", method = "gaussian")$VaR[1,1]
VaR.Port.Mod <- VaR(Port.returns, p=0.95, weights = weights, portfolio_method = "component", method = "modified")$MVaR[1,1]
All.VAR$Portfolio <- c(VaR.Port.Hist, VaR.Port.Gaus, VaR.Port.Mod)
All.VAR <- abs(All.VAR)
All.VAR$Type <- c("Historical", "Gaussian", "Modified")
#final step plot!
plotVar <- melt(All.VAR, variable.name = "tickers", value.name = "VaR")
ggplot(plotVar, aes(x=Type, y=VaR, fill=tickers)) + geom_bar(stat = "identity", position = "dodge")
library(quantmod)
library(PerformanceAnalytics)
library(reshape2)
library(ggplot2)
#step1 get the input ready
maxDate <- "2016-01-01"
tickers <- c("BMW.F","ALIZF","TSLA","FB","TWTR")
weights <- c(0.20,0.20,0.20,0.20,0.20)
n <- length(tickers)
#step2 get the specific data required for calculation
getSymbols(tickers, from = maxDate, auto.assign=TRUE)
#take the adjusted price column into one dataframe
#My first attempt!!!
#Port.prices <- merge(Ad(TSLA),Ad(AAPL),Ad(AMZN))       #??????this step, how to put merge(tickers) instead of put name into the fuction.
#My Second attenpt!!!
#Port.prices <- merge(Ad(eval(parse(text = tickers[1]))),Ad(eval(parse(text = tickers[2]))),Ad(eval(parse(text = tickers[3]))))
Port.prices <- data.frame()
Port.prices <- Ad(eval(parse(text = tickers[1])))
for (i in c(2:n)) {
#Port.prices$tickers[i] <- Ad(eval(parse(text = tickers[i])))
Port.prices <- cbind(Port.prices ,Ad(eval(parse(text = tickers[i]))))
}
#then calculate the returns
Port.returns <- ROC(Port.prices, type="discrete")[-1,]
#change the column name for better outlook
colnames(Port.returns) <- tickers
#step3 calculate the VaR in our porfolio
VaR.Hist <- VaR(Port.returns, p=0.95, weights = NULL, portfolio_method = "single", method = "historical")
VaR.Gaus <- VaR(Port.returns, p=0.95, weights = NULL, portfolio_method = "single", method = "gaussian")
VaR.Mod <- VaR(Port.returns, p=0.95, weights = NULL, portfolio_method = "single", method = "modified")
All.VAR <- data.frame(rbind(VaR.Hist, VaR.Gaus, VaR.Mod))
rownames(All.VAR) <- c("Hist", "Gaussian", "Modified")
VaR.Port.Hist <- VaR(Port.returns, p=0.95, weights = weights, portfolio_method = "component", method = "historical")
VaR.Port.Gaus <- VaR(Port.returns, p=0.95, weights = weights, portfolio_method = "component", method = "gaussian")$VaR[1,1]
VaR.Port.Mod <- VaR(Port.returns, p=0.95, weights = weights, portfolio_method = "component", method = "modified")$MVaR[1,1]
All.VAR$Portfolio <- c(VaR.Port.Hist, VaR.Port.Gaus, VaR.Port.Mod)
All.VAR <- abs(All.VAR)
All.VAR$Type <- c("Historical", "Gaussian", "Modified")
#final step plot!
plotVar <- melt(All.VAR, variable.name = "tickers", value.name = "VaR")
ggplot(plotVar, aes(x=Type, y=VaR, fill=tickers)) + geom_bar(stat = "identity", position = "dodge")
shiny::runApp('OneDrive/Data_Science/R/R Shiny/testtest')
l
?

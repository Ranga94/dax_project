MSFT.prices
MSFT.prices <- getSymbols("MSFT", auto.assign = F)
library(quantmod)
library(PerformanceAnalytics)
MSFT.prices <- getSymbols("MSFT", auto.assign = F)
TSLA.prices <- getSymbols("TSLA", auto.assign = F)
TSLA.prices
maxDate <- "2000-01-01"
TSLA.prices <- getSymbols("TSLA", auto.assign = F,from=maxDate)
TSLA.prices
maxDate <- "2014-01-01"
TSLA.prices <- getSymbols("TSLA", auto.assign = F,from=maxDate)
TSLA.prices
maxDate <- "2017-01-01"
TSLA.prices <- getSymbols("TSLA", auto.assign = F,from=maxDate)
TSLA.prices
TSLA.prices <- Op(getSymbols("TSLA", auto.assign = F,from=maxDate))
TSLA.prices
TSLA.prices <- Ad(getSymbols("TSLA", auto.assign = F,from=maxDate))
TSLA.prices
TSLA.prices <- Adju(getSymbols("TSLA", auto.assign = F,from=maxDate))
TSLA.prices <- Ad(getSymbols("TSLA", auto.assign = F,from=maxDate))
tail(TSLA.prices)
TSLA.r <- dailyReturn(TSLA.prices)
TSLA.r
VaR(TSLA.r, p=0.95, methods="historical")
?VaR
?stockSymbols
stockSymbols() <- na.omit(merge(Ad(AAPL),Ad(AMZN),Ad(TWTR))
stockSymbols()
stocks <- c("AAPL","AMZN","TWTR")
weights <- c(0.5, 0.1, 0.4)
getSymbols(tickers, from=maxDate)
getSymbols(stocks, from=maxDate)
getSymbols()
getSymbols
getSymbols(stocks, from=maxDate)
Portfolio <- getSymbols(stocks, from=maxDate)
Portfolio
library(shiny)
Test_UI <- fluidPage()
Test_server <- function(input, output) {}
shinyApp(ui = Test_UI, server = Test_server)
library(shiny)
Test_UI <- fluidPage("hello hell")
Test_server <- function(input, output) {}
shinyApp(ui = Test_UI, server = Test_server)
?sliderInput
library(shiny)
Test_UI <- fluidPage(
sliderInput(inputId = "num",
label = "Choose a fucking number",
value = 25, min = 1, max = 100),
plotOutput("hist")
)
Test_server <- function(input, output) {}
shinyApp(ui = Test_UI, server = Test_server)
library(shiny)
Test_UI <- fluidPage(
sliderInput(inputId = "num",
label = "Choose a fucking number",
value = 25, min = 1, max = 100),
#Identify the input
plotOutput("hist")
#Identify the object and way of output
)
Test_server <- function(input, output) {}
shinyApp(ui = Test_UI, server = Test_server)
library(shiny)
Test_UI <- fluidPage(
sliderInput(inputId = "num",
label = "Choose a fucking number",
value = 25, min = 1, max = 100),
#Identify the input
plotOutput("hist")
#Identify the object and way of output
)
Test_server <- function(input, output) {
output$hist <- renderPlot({
title <- "100 random normal values"
hist(rnorm(input$num), main = title
})
}
shinyApp(ui = Test_UI, server = Test_server)
}
shinyApp(ui = Test_UI, server = Test_server)
library(shiny)
Test_UI <- fluidPage(
sliderInput(inputId = "num",
label = "Choose a fucking number",
value = 25, min = 1, max = 100),
#Identify the input
plotOutput("hist")
#Identify the object and way of output
)
Test_server <- function(input, output) {
output$hist <- renderPlot({
title <- "100 random normal values"
hist(rnorm(input$num), main = title
})
}
shinyApp(ui = Test_UI, server = Test_server)
library(shiny)
Test_UI <- fluidPage(
sliderInput(inputId = "num",
label = "Choose a fucking number",
value = 25, min = 1, max = 100),
#Identify the input
plotOutput("hist")
#Identify the object and way of output
)
Test_server <- function(input, output) {
output$hist <- renderPlot({
title <- "100 random normal values"
hist(rnorm(input$num), main = title
})
}
shinyApp(ui = Test_UI, server = Test_server)
runApp('OneDrive/Data_Science/R/R Shiny/Test Project/Test_app.R')
runApp('OneDrive/Data_Science/R/R Shiny/Test Project/Test_app.R')
runApp('OneDrive/Data_Science/R/R Shiny/Test Project')
runApp('OneDrive/Data_Science/R/R Shiny/Test Project')
runApp('OneDrive/Data_Science/R/R Shiny/Test Project')
rsconnect::setAccountInfo(name='sparklingocean',
token='28BA68C86471B3DBF54684566AC65037',
secret='<SECRET>')
runApp('OneDrive/Data_Science/R/R Shiny/Test Project')
runApp('OneDrive/Data_Science/R/R Shiny/Test Project')
runApp('OneDrive/Data_Science/R/R Shiny/Test Project')
runApp('OneDrive/Data_Science/R/R Shiny/Test Project')
runApp('OneDrive/Data_Science/R/R Shiny/Test Project')
runApp('OneDrive/Data_Science/R/R Shiny/Test Project/app')
runApp('OneDrive/Data_Science/R/R Shiny/Test Project')
runApp('OneDrive/Data_Science/R/R Shiny/Test Project')
runApp('OneDrive/Data_Science/R/R Shiny/Test Project')
runApp('OneDrive/Data_Science/R/R Shiny/Test Project')
runApp('OneDrive/Data_Science/R/R Shiny/Test Project')
View(Test_UI)
View(TSLA.prices)
runApp('OneDrive/Data_Science/R/R Shiny/Test Project')
runApp('OneDrive/Data_Science/R/R Shiny/Test Project')
?font-family
?font
??font
runApp('OneDrive/Data_Science/R/R Shiny/Test Project')
TSLA.prices <- Ad(getSymbols("TSLA", auto.assign = F,from=maxDate))
result
TSLA.prices
TSLA.prices
library(quantmod)
TSLA.prices
TSLA.prices
TSLA.prices
TSLA.prices
TSLA.prices
TSLA.prices
TSLA.prices <- Ad(getSymbols("TSLA", auto.assign = F, from = maxDate))
TSLA.prices
TSLA.prices <- Ad(getSymbols("TSLA", auto.assign = F, from = maxDate))
TSLA.prices
TSLA.prices
maxDate <- "2017-09-01"
TSLA.prices <- Ad(getSymbols("TSLA", auto.assign = F, from = maxDate))
TSLA.prices
maxDate <- "2017-09-01"
maxDate <- "2017-09-01"
TSLA.prices <- Ad(getSymbols("TSLA", auto.assign = F, from = maxDate))
TSLA.prices
TSLA.rtns <- dailyReturn(TSLA.prices)
TSLA.rtns
VaR(TSLA.rtns, p=0.99, method="historical")
?VaR
library(quantmod)
library(PerformanceAnalytics)
VaR(TSLA.rtns, p=0.99, method="historical")
?VaR
VaR(TSLA.rtns, p=0.99, method="gaussian")
#maxDate <- "2017-09-01"
TSLA.prices <- Ad(getSymbols("TSLA", auto.assign = F))
TSLA.prices
TSLA.rtns <- dailyReturn(TSLA.prices)
VaR(TSLA.rtns, p=0.99, method="gaussian")
?getSymbols
TSLA.prices <- Ad(getSymbols("TSLA", auto.assign = T, from = maxDate))
maxDate <- "2017-09-01"
TSLA.prices <- Ad(getSymbols("TSLA", auto.assign = T, from = maxDate))
TSLA.prices <- Ad(getSymbols("TSLA", auto.assign = F, from = maxDate))
TSLA.prices <- Ad(getSymbols("TSLA", auto.assign = F, from = maxDate))
?VaR
TSLA.prices
maxDate <- "01-11-2017"
TSLA.prices <- Ad(getSymbols("TSLA", auto.assign = F, from = maxDate))
TSLA.prices
# TSLA.r <- dailyReturn(TSLA.prices)
# VaR(TSLA.r, p=0.95, methods="historical")
#
# tickers <- c("AAPL","AMZN","TWTR")
# weights <- c(0.5, 0.1, 0.4)
# Portfolio <- getSymbols(tickers, from=maxDate)
#
# na.omit(merge(Ad(AAPL),Ad(AMZN),Ad(TWTR))
library(reshape2)
library(ggplot2)
library(ggplot2)
VaR.hist(TSLA.rtns, p=0.99, method="historical")
VaR.hist <- VaR(TSLA.rtns, p=0.99, method="historical")
VaR.hist
?VaR
VAR.hist
VAR.hist
VAR.hist <- VaR(TSLA.rtns, p=0.99, method="historical")
VAR.gaus <- VaR(TSLA.rtns, p=0.99, method="gaussian")
VAR.mod <- VaR(TSLA.rtns, p=0.99, method="modified")
VAR.hist
VAR.gaus
VAR.mod
ALL.VAR <- data.frame(rbind(VAR.hist,VAR.gaus,VAR.mod))
rownames(ALL.VAR) <- c("Historical","Gaussian","Modified")
ALL.VAR
maxDate <- "2017-09-01"
ticker <- "TSLA"
stock.prices <- Ad(getSymbols("ticker", auto.assign = F, from = maxDate))
stock.rtns <- dailyReturn(stock.prices)
stock.prices <- Ad(getSymbols("ticker", auto.assign = F, from = maxDate))
stock.prices <- Ad(getSymbols("ticker", auto.assign = F, from = maxDate))
stock.prices <- Ad(getSymbols(ticker, auto.assign = F, from = maxDate))
stock.rtns <- dailyReturn(stock.prices)
stock.rtns
VAR.mod <- VaR(stock.rtns, p=0.99, method="modified")
stock.prices <- Ad(getSymbols(ticker, auto.assign = F, from = maxDate))
stock.rtns <- dailyReturn(stock.prices)
VAR.hist <- VaR(stock.rtns, p=0.99, method="historical")
VAR.gaus <- VaR(stock.rtns, p=0.99, method="gaussian")
VAR.mod <- VaR(stock.rtns, p=0.99, method="modified")
ALL.VAR <- data.frame(rbind(VAR.hist,VAR.gaus,VAR.mod))
rownames(ALL.VAR) <- c("Historical","Gaussian","Modified")
colnames(ALL.VAR) <- ticker
ALL.VAR
ALL.VAR$Type <- c(Historical","Gaussian","Modified")
ALL.VAR$Type <- c("Historical","Gaussian","Modified")
ALL.VAR
library(reshape2)
library(ggplot2)
plotVar <- melt(ALL.VAR, variable.name = "ticker", value.name = "VaR")
plotVar
ggplot(plotVar, aes(x=Type, y=VaR, fill=ticker)) + geom_bar(stat = "identity", position = "dodge")
ggplot(plotVar, aes(x=VaR calculation method, y=VaR(Return loss), fill=ticker)) + geom_bar(stat = "identity", position = "dodge")
ggplot(plotVar, aes(x="VaR calculation method", y="VaR(Return loss)", fill=ticker)) + geom_bar(stat = "identity", position = "dodge")
ggplot(plotVar, aes(x=Type, y=VaR, fill=ticker)) + geom_bar(stat = "identity", position = "dodge")
ALL.VAR$VaR calculation method <- c("Historical","Gaussian","Modified")
ALL.VAR$"VaR calculation method" <- c("Historical","Gaussian","Modified")
ALL.VAR
ggplot(plotVar, aes(x=Type, y=VaR, fill=ticker)) + geom_bar(stat = "identity", position = "dodge")
ggplot(plotVar, aes(x=Type, y="VaR(Return loss)", fill=ticker)) + geom_bar(stat = "identity", position = "dodge")
VaR
ggplot(plotVar, aes(x=Type, y=VaR, fill=ticker)) + geom_bar(stat = "identity", position = "dodge")
ggplot(plotVar, aes(x=Calculation, y=VaR, fill=ticker)) + geom_bar(stat = "identity", position = "dodge")
ggplot(plotVar, aes(x="VaR calculation method", y=VaR, fill=ticker)) + geom_bar(stat = "identity", position = "dodge")
ggplot(plotVar, aes(x=Type, y=VaR, fill=ticker)) + geom_bar(stat = "identity", position = "dodge")
ALL.VAR
ggplot(plotVar, aes(x=Type, y=VaR, fill="VaR calculation method")) + geom_bar(stat = "identity", position = "dodge")
R
ticker
ggplot(plotVar, aes(x=Type, y=VaR, fill=ticker)) + geom_bar(stat = "identity", position = "dodge")
ALL.VAR <- abs(ALL.VAR)
ALL.VAR <- abs(ALL.VAR)
maxDate <- "2017-09-01"
ticker <- "TSLA"
stock.prices <- Ad(getSymbols(ticker, auto.assign = F, from = maxDate))
stock.rtns <- dailyReturn(stock.prices)
VAR.hist <- VaR(stock.rtns, p=0.99, method="historical")
VAR.gaus <- VaR(stock.rtns, p=0.99, method="gaussian")
VAR.mod <- VaR(stock.rtns, p=0.99, method="modified")
ALL.VAR <- data.frame(rbind(VAR.hist,VAR.gaus,VAR.mod))
rownames(ALL.VAR) <- c("Historical","Gaussian","Modified")
colnames(ALL.VAR) <- ticker
ALL.VAR <- abs(ALL.VAR)
ALL.VAR
colnames(ALL.VAR) <- "VaR(Return loss)"
ALL.VAR <- abs(ALL.VAR)
ALL.VAR
ALL.VAR$"VaR calculation method" <- c("Historical","Gaussian","Modified")
ALL.VAR
library(reshape2)
library(ggplot2)
plotVar <- melt(ALL.VAR, variable.name = "ticker", value.name = "VaR(Return loss)")
ggplot(plotVar, aes(x="VaR calculation method", y="VaR(Return loss)", fill=ticker)) + geom_bar(stat = "identity", position = "dodge")
plotVar <- melt(ALL.VAR, variable.name = "ticker", value.name = "VaR(Return loss)")
plotVar
plotVar <- melt(ALL.VAR, variable.name = "ticker", value.name = "VaR")
plotVar
ALL.VAR
maxDate <- "2017-09-01"
ticker <- "TSLA"
stock.prices <- Ad(getSymbols(ticker, auto.assign = F, from = maxDate))
stock.rtns <- dailyReturn(stock.prices)
VAR.hist <- VaR(stock.rtns, p=0.99, method="historical")
VAR.gaus <- VaR(stock.rtns, p=0.99, method="gaussian")
VAR.mod <- VaR(stock.rtns, p=0.99, method="modified")
ALL.VAR <- data.frame(rbind(VAR.hist,VAR.gaus,VAR.mod))
rownames(ALL.VAR) <- c("Historical","Gaussian","Modified")
colnames(ALL.VAR) <- "ticker"
ALL.VAR <- abs(ALL.VAR)
ALL.VAR$"VaR calculation method" <- c("Historical","Gaussian","Modified")
library(reshape2)
library(ggplot2)
plotVar <- melt(ALL.VAR, variable.name = "ticker", value.name = "VaR")
plotVar
ALL.VAR <- data.frame(rbind(VAR.hist,VAR.gaus,VAR.mod))
ALL.VAR <- data.frame(rbind(VAR.hist,VAR.gaus,VAR.mod))
maxDate <- "2017-09-01"
ticker <- "TSLA"
stock.prices <- Ad(getSymbols(ticker, auto.assign = F, from = maxDate))
stock.rtns <- dailyReturn(stock.prices)
VAR.hist <- VaR(stock.rtns, p=0.99, method="historical")
VAR.gaus <- VaR(stock.rtns, p=0.99, method="gaussian")
VAR.mod <- VaR(stock.rtns, p=0.99, method="modified")
ALL.VAR <- data.frame(rbind(VAR.hist,VAR.gaus,VAR.mod))
rownames(ALL.VAR) <- c("Historical","Gaussian","Modified")
colnames(ALL.VAR) <- ticker
ALL.VAR <- abs(ALL.VAR)
ALL.VAR$"VaR calculation method" <- c("Historical","Gaussian","Modified")
library(reshape2)
library(ggplot2)
plotVar <- melt(ALL.VAR, variable.name = "ticker", value.name = "VaR")
plotVar
plotVar <- melt(ALL.VAR, variable.name = "ticker", value.name = "VaR(Return loss)")
plotVar
ggplot(plotVar, aes(x=VaR calculation method, y=VaR(Return loss), fill=ticker)) + geom_bar(stat = "identity", position = "dodge")
ggplot(plotVar, aes(x=Type, y=VaR, fill=ticker)) + geom_bar(stat = "identity", position = "dodge")
ggplot(plotVar, aes(x=paste(VaR calculation method), y=paste(VaR(Return loss)), fill=ticker)) + geom_bar(stat = "identity", position = "dodge")
colnames(ALL.VAR) <- ticker
ALL.VAR <- abs(ALL.VAR)
ALL.VAR$"Type" <- c("Historical","Gaussian","Modified")
maxDate <- "2017-09-01"
ticker <- "TSLA"
stock.prices <- Ad(getSymbols(ticker, auto.assign = F, from = maxDate))
stock.rtns <- dailyReturn(stock.prices)
VAR.hist <- VaR(stock.rtns, p=0.99, method="historical")
VAR.gaus <- VaR(stock.rtns, p=0.99, method="gaussian")
VAR.mod <- VaR(stock.rtns, p=0.99, method="modified")
ALL.VAR <- data.frame(rbind(VAR.hist,VAR.gaus,VAR.mod))
rownames(ALL.VAR) <- c("Historical","Gaussian","Modified")
colnames(ALL.VAR) <- ticker
ALL.VAR <- abs(ALL.VAR)
ALL.VAR$"Type" <- c("Historical","Gaussian","Modified")
library(reshape2)
library(ggplot2)
plotVar <- melt(ALL.VAR, variable.name = "ticker", value.name = "VaR")
ggplot(plotVar, aes(x=Type), y=VaR), fill=ticker)) + geom_bar(stat = "identity", position = "dodge")
ggplot(plotVar, aes(x=Type, y=VaR), fill=ticker)) + geom_bar(stat = "identity", position = "dodge")
ggplot(plotVar, aes(x=Type, y=VaR, fill=ticker)) + geom_bar(stat = "identity", position = "dodge")
library(reshape2)
runApp('OneDrive/Data_Science/R/R Shiny/VaR')
ggplot(plotVar, aes(x=Type, y=VaR, fill=ticker)) + geom_bar(stat = "identity", position = "dodge")
runApp('OneDrive/Data_Science/R/R Shiny/VaR')
runApp('OneDrive/Data_Science/R/R Shiny/VaR')
ggplot(plotVar, aes(x=Type, y=VaR, fill=ticker)) + geom_bar(stat = "identity", position = "dodge")
runApp('OneDrive/Data_Science/R/R Shiny/VaR')
runApp('OneDrive/Data_Science/R/R Shiny/VaR/Kefei')
runApp('OneDrive/Data_Science/R/R Shiny/VaR')
runApp('OneDrive/Data_Science/R/R Shiny/VaR')
runApp('OneDrive/Data_Science/R/R Shiny/VaR')
